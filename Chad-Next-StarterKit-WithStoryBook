#!/bin/bash
:<<'END'
copy shell file and open terminal same directory
sh ./create-next-app-shell.sh
just type your project name
will run create-next-app and setup prettier and eslint with airbnb code convention
END
echo "Enter your project name(do not type uppercase)"
read projectName

yarn create next-app --typescript "$projectName"
cd "$projectName"
yarn add -D eslint-config-prettier eslint-plugin-prettier @typescript-eslint/eslint-plugin eslint prettier @typescript-eslint/parser eslint-config-airbnb
yarn add --dev typescript eslint@8.2.0 eslint-plugin-import@2.25.3 eslint-plugin-jsx-a11y@6.5.1 eslint-plugin-react@7.28.0 eslint-plugin-react-hooks@4.3.0
yarn add framer-motion @emotion/styled @emotion/react axios react-query@3.39.2 @next/bundle-analyzer
echo "{" > .eslintrc.json
echo  "\"extends\": [" >> .eslintrc.json
echo  "  \"airbnb\"," >> .eslintrc.json
echo  "  \"plugin:prettier/recommended\"," >> .eslintrc.json
echo  "  \"plugin:@typescript-eslint/eslint-recommended\"," >> .eslintrc.json
echo  "  \"plugin:@typescript-eslint/recommended\"," >> .eslintrc.json
echo  "  \"next/core-web-vitals\"" >> .eslintrc.json
echo  "]," >> .eslintrc.json
echo  "\"rules\": {" >> .eslintrc.json
echo  "  \"react/jsx-filename-extension\": [" >> .eslintrc.json
echo  "    2," >> .eslintrc.json
echo  "    { \"extensions\": [\".js\", \".jsx\", \".ts\", \".tsx\"] }" >> .eslintrc.json
echo  "  ]," >> .eslintrc.json
echo  "  \"react/function-component-definition\": [" >> .eslintrc.json
echo  "    2," >> .eslintrc.json
echo  "    {" >> .eslintrc.json
echo  "      \"namedComponents\": \"arrow-function\"," >> .eslintrc.json
echo  "      \"unnamedComponents\": \"arrow-function\"" >> .eslintrc.json
echo  "    }" >> .eslintrc.json
echo  "  ]," >> .eslintrc.json
echo  "  \"prettier/prettier\": [\"error\"]," >> .eslintrc.json
echo  "  \"react/jsx-props-no-spreading\": \"off\"," >> .eslintrc.json
echo  "  \"no-unused-vars\": \"off\"," >> .eslintrc.json
echo  "  \"@typescript-eslint/no-unused-vars\": [\"error\"]," >> .eslintrc.json
echo  "  \"import/no-extraneous-dependencies\": \"off\"," >> .eslintrc.json
echo  "  \"react/no-unused-prop-types\": \"off\"," >> .eslintrc.json
echo  "  \"react/require-default-props\": \"off\"" >> .eslintrc.json
echo  "}" >> .eslintrc.json
echo "}" >> .eslintrc.json

echo "{" > .prettierrc.json
echo "  \"printWidth\": 80," >> .prettierrc.json
echo "  \"semi\": true," >> .prettierrc.json
echo "  \"singleQuote\": true," >> .prettierrc.json
echo "  \"trailingComma\": \"all\"," >> .prettierrc.json
echo "  \"tabWidth\": 2," >> .prettierrc.json
echo "  \"bracketSpacing\": true," >> .prettierrc.json
echo "  \"endOfLine\": \"auto\"," >> .prettierrc.json
echo "  \"useTabs\": false" >> .prettierrc.json
echo "}" >> .prettierrc.json

echo import \'../styles/globals.css\'\; > ./pages/_app.tsx
echo "import type { AppProps } from 'next/app';" >> ./pages/_app.tsx
echo "import { Hydrate, QueryClient, QueryClientProvider } from 'react-query';" >> ./pages/_app.tsx
echo "import { ReactQueryDevtools } from 'react-query/devtools';" >> ./pages/_app.tsx
echo "import { useRef } from 'react';" >> ./pages/_app.tsx
echo "" >> ./pages/_app.tsx
echo "const App = ({ Component, pageProps }: AppProps) => {" >> ./pages/_app.tsx
echo "  const queryClientRef = useRef<QueryClient>();" >> ./pages/_app.tsx
echo "  if (!queryClientRef.current) {" >> ./pages/_app.tsx
echo "    const queryClient = new QueryClient({" >> ./pages/_app.tsx
echo "      defaultOptions: { queries: { refetchOnWindowFocus: false } }," >> ./pages/_app.tsx
echo "    });" >> ./pages/_app.tsx
echo "    queryClientRef.current = queryClient;" >> ./pages/_app.tsx
echo "  }" >> ./pages/_app.tsx
echo "" >> ./pages/_app.tsx
echo "  return (" >> ./pages/_app.tsx
echo "    <QueryClientProvider client={queryClientRef.current}>" >> ./pages/_app.tsx
echo "      <Hydrate state={pageProps.dehydratedState}>" >> ./pages/_app.tsx
echo "        <Component {...pageProps} />" >> ./pages/_app.tsx
echo "        <ReactQueryDevtools />" >> ./pages/_app.tsx
echo "      </Hydrate>" >> ./pages/_app.tsx
echo "    </QueryClientProvider>" >> ./pages/_app.tsx
echo "  );" >> ./pages/_app.tsx
echo "};" >> ./pages/_app.tsx
echo "" >> ./pages/_app.tsx
echo "export default App;" >> ./pages/_app.tsx


echo "import type { NextPage } from 'next';" > ./pages/index.tsx
echo "import Head from 'next/head';" >> ./pages/index.tsx
echo "" >> ./pages/index.tsx
echo "const Home: NextPage = () => {" >> ./pages/index.tsx
echo "  return (" >> ./pages/index.tsx
echo "    <div>" >> ./pages/index.tsx
echo "      <Head>" >> ./pages/index.tsx
echo "        <title>My Next App</title>" >> ./pages/index.tsx
echo "        <link rel=\"icon\" href=\"/favicon.ico\" />" >> ./pages/index.tsx
echo "      </Head>" >> ./pages/index.tsx
echo "" >> ./pages/index.tsx
echo "      <main>" >> ./pages/index.tsx
echo "        <h1>My Next App</h1>" >> ./pages/index.tsx
echo "      </main>" >> ./pages/index.tsx
echo "      <footer>" >> ./pages/index.tsx
echo "        <span>Footer</span>" >> ./pages/index.tsx
echo "      </footer>" >> ./pages/index.tsx
echo "    </div>" >> ./pages/index.tsx
echo "  );" >> ./pages/index.tsx
echo "};" >> ./pages/index.tsx
echo "" >> ./pages/index.tsx
echo "export default Home;" >> ./pages/index.tsx

rm -rf ./pages/api
rm -rf ./styles/Home.module.css

echo "{" > tsconfig.json
echo "  \"compilerOptions\": {" >> tsconfig.json
echo "    \"target\": \"es5\"," >> tsconfig.json
echo "    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"]," >> tsconfig.json
echo "    \"allowJs\": true," >> tsconfig.json
echo "    \"skipLibCheck\": true," >> tsconfig.json
echo "    \"strict\": true," >> tsconfig.json
echo "    \"forceConsistentCasingInFileNames\": true," >> tsconfig.json
echo "    \"noEmit\": true," >> tsconfig.json
echo "    \"esModuleInterop\": true," >> tsconfig.json
echo "    \"module\": \"esnext\"," >> tsconfig.json
echo "    \"moduleResolution\": \"node\"," >> tsconfig.json
echo "    \"resolveJsonModule\": true," >> tsconfig.json
echo "    \"isolatedModules\": true," >> tsconfig.json
echo "    \"jsx\": \"preserve\"," >> tsconfig.json
echo "    \"incremental\": true," >> tsconfig.json
echo "    \"baseUrl\": \".\"," >> tsconfig.json
echo "    \"paths\": {" >> tsconfig.json
echo "      \"@components/*\": [\"src/components/*\"]," >> tsconfig.json
echo "      \"@layouts/*\": [\"src/layouts/*\"]," >> tsconfig.json
echo "      \"@pages/*\": [\"src/pages/*\"]," >> tsconfig.json
echo "      \"@public/*\": [\"public/*\"]," >> tsconfig.json
echo "      \"@styles/*\": [\"src/styles/*\"]," >> tsconfig.json
echo "      \"@utils/*\": [\"src/utils/*\"]," >> tsconfig.json
echo "      \"@hooks/*\": [\"src/hooks/*\"]," >> tsconfig.json
echo "      \"@typings/*\": [\"src/typings/*\"]," >> tsconfig.json
echo "      \"@stories/*\": [\"src/stories/*\"]" >> tsconfig.json
echo "    }" >> tsconfig.json
echo "  }," >> tsconfig.json
echo "  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\"]," >> tsconfig.json
echo "  \"exclude\": [\"node_modules\"]" >> tsconfig.json
echo "}" >> tsconfig.json

echo "/* eslint-disable @typescript-eslint/no-var-requires */" > next.config.js
echo "const withBundleAnalyzer = require('@next/bundle-analyzer')({" >> next.config.js
echo "  enabled: process.env.ANALYZE === 'true'," >> next.config.js
echo "});" >> next.config.js
echo "" >> next.config.js
echo "const nextConfig = {" >> next.config.js
echo "  reactStrictMode: false," >> next.config.js
echo "  swcMinify: true," >> next.config.js
echo "  i18n: {" >> next.config.js
echo "    locales: ['en', 'ko']," >> next.config.js
echo "    defaultLocale: 'ko'," >> next.config.js
echo "  }," >> next.config.js
echo "  compress: true," >> next.config.js
echo "  productionBrowserSourceMaps: false," >> next.config.js
echo "};" >> next.config.js
echo "" >> next.config.js
echo "module.exports = withBundleAnalyzer({" >> next.config.js
echo "  ...nextConfig," >> next.config.js
echo "  webpack(config) {" >> next.config.js
echo "    const prod = process.env.NODE_ENV === 'production';" >> next.config.js
echo "    return {" >> next.config.js
echo "      ...config," >> next.config.js
echo "      mode: prod ? 'production' : 'development'," >> next.config.js
echo "      devtool: prod ? 'hidden-source-map' : 'eval-source-map'," >> next.config.js
echo "    };" >> next.config.js
echo "  }," >> next.config.js
echo "});" >> next.config.js


mkdir components
mkdir layouts
mkdir utils
mkdir hooks
mkdir typings

npx -y sb init --builder webpack5

echo "const path = require('path');" > .storybook/main.js
echo "" >> .storybook/main.js
echo "module.exports = {" >> .storybook/main.js
echo "  stories: ['../src/**/*.stories.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)']," >> .storybook/main.js
echo "  addons: ['@storybook/addon-links', '@storybook/addon-essentials']," >> .storybook/main.js
echo "  webpackFinal: async (config) => {" >> .storybook/main.js
echo "    config.resolve.modules = [" >> .storybook/main.js
echo "      path.resolve(__dirname, '..')," >> .storybook/main.js
echo "      'node_modules'," >> .storybook/main.js
echo "      'src/styles'," >> .storybook/main.js
echo "    ];" >> .storybook/main.js
echo "" >> .storybook/main.js
echo "    config.resolve.alias = {" >> .storybook/main.js
echo "      ...config.resolve.alias," >> .storybook/main.js
echo "      '@components': path.resolve(__dirname, '../src/components')," >> .storybook/main.js
echo "      '@layouts': path.resolve(__dirname, '../src/layouts')," >> .storybook/main.js
echo "      '@utils': path.resolve(__dirname, '../src/utils')," >> .storybook/main.js
echo "      '@hooks': path.resolve(__dirname, '../src/hooks')," >> .storybook/main.js
echo "      '@pages': path.resolve(__dirname, '../src/pages')," >> .storybook/main.js
echo "      '@styles': path.resolve(__dirname, '../src/styles')," >> .storybook/main.js
echo "      '@typings': path.resolve(__dirname, '../src/typings')," >> .storybook/main.js
echo "      '@public': path.resolve(__dirname, '../src/public')," >> .storybook/main.js
echo "      '@stories': path.resolve(__dirname, '../src/stories')," >> .storybook/main.js
echo "    };" >> .storybook/main.js
echo "" >> .storybook/main.js
echo "    return config;" >> .storybook/main.js
echo "  }," >> .storybook/main.js
echo "};" >> .storybook/main.js

rm -rf stories

mkdir stories

echo ".storybook-button {" > stories/button.css
echo "  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;" >> stories/button.css
echo "  font-weight: 700;" >> stories/button.css
echo "  border: 0;" >> stories/button.css
echo "  border-radius: 3em;" >> stories/button.css
echo "  cursor: pointer;" >> stories/button.css
echo "  display: inline-block;" >> stories/button.css
echo "  line-height: 1;" >> stories/button.css
echo "}" >> stories/button.css
echo ".storybook-button--primary {" >> stories/button.css
echo "  color: white;" >> stories/button.css
echo "  background-color: #1ea7fd;" >> stories/button.css
echo "}" >> stories/button.css
echo ".storybook-button--secondary {" >> stories/button.css
echo "  color: #333;" >> stories/button.css
echo "  background-color: transparent;" >> stories/button.css
echo "  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;" >> stories/button.css
echo "}" >> stories/button.css
echo ".storybook-button--small {" >> stories/button.css
echo "  font-size: 12px;" >> stories/button.css
echo "  padding: 10px 16px;" >> stories/button.css
echo "}" >> stories/button.css
echo ".storybook-button--medium {" >> stories/button.css
echo "  font-size: 14px;" >> stories/button.css
echo "  padding: 11px 20px;" >> stories/button.css
echo "}" >> stories/button.css
echo ".storybook-button--large {" >> stories/button.css
echo "  font-size: 16px;" >> stories/button.css
echo "  padding: 12px 24px;" >> stories/button.css
echo "}" >> stories/button.css


echo "import React from 'react';" > stories/Button.tsx
echo "import './button.css';" >> stories/Button.tsx
echo "" >> stories/Button.tsx
echo "interface ButtonProps {" >> stories/Button.tsx
echo "  primary?: boolean;" >> stories/Button.tsx
echo "  backgroundColor?: string;" >> stories/Button.tsx
echo "  size?: 'small' | 'medium' | 'large';" >> stories/Button.tsx
echo "  label: string;" >> stories/Button.tsx
echo "  onClick?: () => void;" >> stories/Button.tsx
echo "}" >> stories/Button.tsx
echo "" >> stories/Button.tsx
echo "export const Button = ({" >> stories/Button.tsx
echo "  primary = false," >> stories/Button.tsx
echo "  size = 'medium'," >> stories/Button.tsx
echo "  backgroundColor," >> stories/Button.tsx
echo "  label," >> stories/Button.tsx
echo "  ...props" >> stories/Button.tsx
echo "}: ButtonProps) => {" >> stories/Button.tsx
echo "  const mode = primary" >> stories/Button.tsx
echo "    ? 'storybook-button--primary'" >> stories/Button.tsx
echo "    : 'storybook-button--secondary';" >> stories/Button.tsx
echo "  return (" >> stories/Button.tsx
echo "    <button" >> stories/Button.tsx
echo "      type=\"button\"" >> stories/Button.tsx
echo "      className={['storybook-button', \`storybook-button--\${size}\`, mode].join(" >> stories/Button.tsx
echo "        ' '," >> stories/Button.tsx
echo "      )}" >> stories/Button.tsx
echo "      style={{ backgroundColor }}" >> stories/Button.tsx
echo "      {...props}" >> stories/Button.tsx
echo "    >" >> stories/Button.tsx
echo "      {label}" >> stories/Button.tsx
echo "    </button>" >> stories/Button.tsx
echo "  );" >> stories/Button.tsx
echo "};" >> stories/Button.tsx

export default Button;

echo "export default Button;" >> stories/Button.tsx

echo "import React from 'react';" > stories/Button.stories.tsx
echo "import { ComponentStory, ComponentMeta } from '@storybook/react';" >> stories/Button.stories.tsx
echo "" >> stories/Button.stories.tsx
echo "import { Button } from '@stories/Button';" >> stories/Button.stories.tsx
echo "" >> stories/Button.stories.tsx
echo "export default {" >> stories/Button.stories.tsx
echo "  title: 'Example/Button'," >> stories/Button.stories.tsx
echo "  component: Button," >> stories/Button.stories.tsx
echo "  argTypes: {" >> stories/Button.stories.tsx
echo "    backgroundColor: { control: 'color' }," >> stories/Button.stories.tsx
echo "  }," >> stories/Button.stories.tsx
echo "} as ComponentMeta<typeof Button>;" >> stories/Button.stories.tsx
echo "" >> stories/Button.stories.tsx
echo "const Template: ComponentStory<typeof Button> = (args) => <Button {...args} />;" >> stories/Button.stories.tsx
echo "" >> stories/Button.stories.tsx
echo "export const Primary = Template.bind({});" >> stories/Button.stories.tsx
echo "Primary.args = { primary: true, label: 'Button' };" >> stories/Button.stories.tsx
echo "" >> stories/Button.stories.tsx
echo "export const Secondary = Template.bind({});" >> stories/Button.stories.tsx
echo "Secondary.args = { label: 'Button' };" >> stories/Button.stories.tsx
echo "" >> stories/Button.stories.tsx
echo "export const Large = Template.bind({});" >> stories/Button.stories.tsx
echo "Large.args = { size: 'large', label: 'Button' };" >> stories/Button.stories.tsx
echo "" >> stories/Button.stories.tsx
echo "export const Small = Template.bind({});" >> stories/Button.stories.tsx
echo "Small.args = { size: 'small', label: 'Button' };" >> stories/Button.stories.tsx

mkdir src

mv -f ./components ./src
mv -f ./layouts ./src
mv -f ./pages ./src
mv -f ./styles ./src
mv -f ./utils ./src
mv -f ./hooks ./src
mv -f ./typings ./src
mv -f ./stories ./src

echo "# My $projectName App" > README.md

commitMessage="Re-Initialize With Chad Starter Shell by $USER@$(hostname -s) at $(date)"
GIT=`which git`
REPO_DIR=~/org
cd ${REPO_DIR}
${GIT} add --all .
${GIT} commit --allow-empty -m "$commitMessage"
